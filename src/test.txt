--auto recessive
--those that have it will have a 30%chance of dying every step
--those that don't have a 5% chance
--people have a chance of making 0-2 offspring with another person if they're both <reproduce-age> or more

local reproduce_age=2
local pop={}
local startgen=500
local randomseed=232
math.randomseed (randomseed)
function numToAllele(n)
  if n==0 then
    return "B"
  else
    return "b"
  end
end

function sleep(n)
local t0 = os.clock()
while os.clock() - t0 <= n do end
end

function calcAlleleRatio()
  local small=0
  local big=0
  for i,v in pairs(pop) do
    local allele = v[1]
    if allele=="Bb" then 
      small=small+1
      big=big+1
    elseif allele=="bb" then
      small=small+2
    else
      big=big+2
    end
  end
  local bigRatio=big/(#pop*2)
  local smallRatio=1-bigRatio
  return bigRatio*100,smallRatio*100
end

function alleleSort(txt)
  if txt=="bb" or txt=="BB" then
    return txt
  else
    return "Bb"
  end
end
for i=1,startgen do
  pop[#pop+1]={
    alleleSort(numToAllele(math.random(0,1))..numToAllele(math.random(0,1))),
    false,
    10
  }
  --lol second parameter basically prevent adultary
end


while true do
  print("B to B Ratio: ",calcAlleleRatio(),"Pop count: "..#pop)
  local mateable={}
  for i,v in ipairs(pop) do
    local ROLLOFDEATH=math.random(1,100)
    local ded=false
    if v[1]=="bb" then
      if ROLLOFDEATH<=10 then
        table.remove(pop,i)
        ded=true
      end
    else
      if ROLLOFDEATH<=3 then
        table.remove(pop,i)
        ded=true
      end
    end
    if not ded then
      pop[i][3]=pop[i][3]+1
      if not v[2] and v[3]>reproduce_age then
        mateable[#mateable+1] = i
      end
    end
  end
  
  for i=1,math.floor(#mateable/2) do
    --good stuff going on here hehe (ˉ▽￣～)
    local p1index=math.random(1,#mateable)
    local p1=mateable[p1index]
    table.remove(mateable,p1index)
    local p2index=math.random(1,#mateable)
    local p2=mateable[p2index]
    table.remove(mateable,p2index)
    pop[p1][2]=true
    pop[p2][2]=true
    local babyCount=math.random(1,3)
    print("sussytime count: "..babyCount)
    for ii=1,babyCount do
      local alleleSelect1=math.random(1,2)
      local alleleSelect2=math.random(1,2)
      local babyAllele=alleleSort(string.sub(pop[p1][1],alleleSelect1,alleleSelect1)..string.sub(pop[p2][1],alleleSelect2,alleleSelect2),pop[p1][1],pop[p2][1])
      print("baby: "..babyAllele,"parent: "..pop[p1][1],pop[p2][1],"id: ",i)
    pop[#pop+1] = {babyAllele,false,0}
    end
  end
  --sleep(1)
  if #pop==0 then
    break
  end
end

print("everyone is dead")